package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeSalaryRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeSalaryRecordAllPropertiesEquals(EmployeeSalaryRecord expected, EmployeeSalaryRecord actual) {
        assertEmployeeSalaryRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeSalaryRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeSalaryRecordAllUpdatablePropertiesEquals(EmployeeSalaryRecord expected, EmployeeSalaryRecord actual) {
        assertEmployeeSalaryRecordUpdatableFieldsEquals(expected, actual);
        assertEmployeeSalaryRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeSalaryRecordAutoGeneratedPropertiesEquals(EmployeeSalaryRecord expected, EmployeeSalaryRecord actual) {
        assertThat(expected)
            .as("Verify EmployeeSalaryRecord auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeSalaryRecordUpdatableFieldsEquals(EmployeeSalaryRecord expected, EmployeeSalaryRecord actual) {
        assertThat(expected)
            .as("Verify EmployeeSalaryRecord relevant properties")
            .satisfies(e -> assertThat(e.getSalaryRecordDate()).as("check salaryRecordDate").isEqualTo(actual.getSalaryRecordDate()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getAreaName()).as("check areaName").isEqualTo(actual.getAreaName()))
            .satisfies(e -> assertThat(e.getAreaCode()).as("check areaCode").isEqualTo(actual.getAreaCode()))
            .satisfies(e -> assertThat(e.getEmployeeName()).as("check employeeName").isEqualTo(actual.getEmployeeName()))
            .satisfies(e -> assertThat(e.getBirthday()).as("check birthday").isEqualTo(actual.getBirthday()))
            .satisfies(e -> assertThat(e.getEmployeeCode()).as("check employeeCode").isEqualTo(actual.getEmployeeCode()))
            .satisfies(e -> assertThat(e.getNumberOfDependents()).as("check numberOfDependents").isEqualTo(actual.getNumberOfDependents()))
            .satisfies(e -> assertThat(e.getBasicSalary()).as("check basicSalary").isEqualTo(actual.getBasicSalary()))
            .satisfies(e -> assertThat(e.getCommutingAllowance()).as("check commutingAllowance").isEqualTo(actual.getCommutingAllowance()))
            .satisfies(e -> assertThat(e.getOtherAllowance()).as("check otherAllowance").isEqualTo(actual.getOtherAllowance()))
            .satisfies(e -> assertThat(e.getInsuranceLevel()).as("check insuranceLevel").isEqualTo(actual.getInsuranceLevel()))
            .satisfies(
                e -> assertThat(e.getHealthInsuranceFees()).as("check healthInsuranceFees").isEqualTo(actual.getHealthInsuranceFees())
            )
            .satisfies(
                e -> assertThat(e.getPensionInsuranceFees()).as("check pensionInsuranceFees").isEqualTo(actual.getPensionInsuranceFees())
            )
            .satisfies(
                e -> assertThat(e.getLabourInsuranceFees()).as("check labourInsuranceFees").isEqualTo(actual.getLabourInsuranceFees())
            )
            .satisfies(e -> assertThat(e.getPersonalIncomeTax()).as("check personalIncomeTax").isEqualTo(actual.getPersonalIncomeTax()))
            .satisfies(
                e ->
                    assertThat(e.getPersonalIncomeTaxLevel())
                        .as("check personalIncomeTaxLevel")
                        .isEqualTo(actual.getPersonalIncomeTaxLevel())
            )
            .satisfies(
                e -> assertThat(e.getTotalDeductionAmount()).as("check totalDeductionAmount").isEqualTo(actual.getTotalDeductionAmount())
            )
            .satisfies(e -> assertThat(e.getTakeHomeAmount()).as("check takeHomeAmount").isEqualTo(actual.getTakeHomeAmount()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getCreateUserId()).as("check createUserId").isEqualTo(actual.getCreateUserId()))
            .satisfies(e -> assertThat(e.getCreateDate()).as("check createDate").isEqualTo(actual.getCreateDate()))
            .satisfies(e -> assertThat(e.getUpdateUserId()).as("check updateUserId").isEqualTo(actual.getUpdateUserId()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeSalaryRecordUpdatableRelationshipsEquals(EmployeeSalaryRecord expected, EmployeeSalaryRecord actual) {}
}
